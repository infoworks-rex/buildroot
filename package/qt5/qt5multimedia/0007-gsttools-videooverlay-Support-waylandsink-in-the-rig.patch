From 955de0f26a07eb1ff58c7835d8594f8566015929 Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Wed, 28 Nov 2018 21:31:49 +0800
Subject: [PATCH] gsttools: videooverlay: Support waylandsink in the right way

Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 src/gsttools/qgstreamervideooverlay.cpp            | 54 ++++++++++++++++++++++
 .../gsttools_headers/qgstreamervideooverlay_p.h    |  2 +
 2 files changed, 56 insertions(+)

diff --git a/src/gsttools/qgstreamervideooverlay.cpp b/src/gsttools/qgstreamervideooverlay.cpp
index 6ad70fd..2c192c2 100644
--- a/src/gsttools/qgstreamervideooverlay.cpp
+++ b/src/gsttools/qgstreamervideooverlay.cpp
@@ -40,6 +40,9 @@
 #include "qgstreamervideooverlay_p.h"
 
 #include <QtGui/qguiapplication.h>
+#include <QtGui/qwindow.h>
+#include <QtGui/qpa/qplatformwindow.h>
+#include <QtGui/qpa/qplatformnativeinterface.h>
 #include "qgstutils_p.h"
 
 #if !GST_CHECK_VERSION(1,0,0)
@@ -246,6 +249,8 @@ void QGstreamerVideoOverlay::setRenderRectangle(const QRect &rect)
         h = rect.height();
     }
 
+    m_rect = QRect(x, y, w, h);
+
 #if GST_CHECK_VERSION(1,0,0)
     if (m_videoSink && GST_IS_VIDEO_OVERLAY(m_videoSink))
         gst_video_overlay_set_render_rectangle(GST_VIDEO_OVERLAY(m_videoSink), x, y, w, h);
@@ -260,10 +265,59 @@ void QGstreamerVideoOverlay::setRenderRectangle(const QRect &rect)
 #endif
 }
 
+static QWindow *findWindow(WId id) {
+    const auto allWindows = QGuiApplication::allWindows();
+    for (QWindow *window : allWindows)
+        if (window->winId() == id)
+            return window;
+
+    return NULL;
+}
+
 bool QGstreamerVideoOverlay::processSyncMessage(const QGstreamerMessage &message)
 {
     GstMessage* gm = message.rawMessage();
 
+#if GST_CHECK_VERSION(1,0,0)
+#define GST_WAYLAND_DISPLAY_HANDLE_CONTEXT_TYPE "GstWaylandDisplayHandleContextType"
+    if (gm && (GST_MESSAGE_TYPE(gm) == GST_MESSAGE_NEED_CONTEXT)) {
+        const gchar *type = NULL;
+
+        if (gst_message_parse_context_type(gm, &type) &&
+                !g_strcmp0(type, GST_WAYLAND_DISPLAY_HANDLE_CONTEXT_TYPE)) {
+            GstContext *context =
+                gst_context_new(GST_WAYLAND_DISPLAY_HANDLE_CONTEXT_TYPE, TRUE);
+            QPlatformNativeInterface *native =
+                QGuiApplication::platformNativeInterface();
+            void *handle = NULL;
+
+            if (native)
+                handle = native->nativeResourceForWindow("display", NULL);
+
+            gst_structure_set(gst_context_writable_structure(context),
+                    "handle", G_TYPE_POINTER, handle, NULL);
+            gst_element_set_context(GST_ELEMENT(GST_MESSAGE_SRC(gm)), context);
+            return true;
+        }
+    }
+
+    if (gst_is_video_overlay_prepare_window_handle_message(gm)) {
+        GstVideoOverlay *overlay = GST_VIDEO_OVERLAY(GST_MESSAGE_SRC(gm));
+        QPlatformNativeInterface *native =
+            QGuiApplication::platformNativeInterface();
+        QWindow *window = findWindow(m_windowId);
+        void *handle = NULL;
+
+        if (native && window)
+            handle = native->nativeResourceForWindow("surface", window);
+
+        gst_video_overlay_set_window_handle(overlay, (WId) handle);
+        gst_video_overlay_set_render_rectangle(overlay, m_rect.x(), m_rect.y(),
+            m_rect.width(), m_rect.height());
+        return true;
+    }
+#endif
+
 #if !GST_CHECK_VERSION(1,0,0)
     if (gm && (GST_MESSAGE_TYPE(gm) == GST_MESSAGE_ELEMENT) &&
             gst_structure_has_name(gm->structure, "prepare-xwindow-id")) {
diff --git a/src/multimedia/gsttools_headers/qgstreamervideooverlay_p.h b/src/multimedia/gsttools_headers/qgstreamervideooverlay_p.h
index f3066fa..6d8c0bc 100644
--- a/src/multimedia/gsttools_headers/qgstreamervideooverlay_p.h
+++ b/src/multimedia/gsttools_headers/qgstreamervideooverlay_p.h
@@ -54,6 +54,7 @@
 #include <private/qgstreamerbushelper_p.h>
 #include <private/qgstreamerbufferprobe_p.h>
 #include <QtGui/qwindowdefs.h>
+#include <QtCore/qrect.h>
 #include <QtCore/qsize.h>
 
 QT_BEGIN_NAMESPACE
@@ -124,6 +125,7 @@ private:
     bool m_hasShowPrerollFrame;
 
     WId m_windowId;
+    QRect m_rect;
     Qt::AspectRatioMode m_aspectRatioMode;
     int m_brightness;
     int m_contrast;
-- 
2.11.0

