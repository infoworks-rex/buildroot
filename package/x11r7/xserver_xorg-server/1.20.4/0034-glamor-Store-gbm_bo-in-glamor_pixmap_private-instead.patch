From 604bfac88a03d8649f9fb910f46f05a5e4bf27a5 Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Tue, 9 Jul 2019 19:47:41 +0800
Subject: [PATCH 34/41] glamor: Store gbm_bo in glamor_pixmap_private instead
 of egl image

GBM_BO_IMPORT_EGL_IMAGE is not supported in mali gbm.

Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 glamor/glamor_egl.c                       | 55 +++++++++++++------------------
 glamor/glamor_priv.h                      |  6 +++-
 hw/xfree86/drivers/modesetting/pageflip.c |  3 ++
 hw/xfree86/drivers/modesetting/present.c  |  1 -
 4 files changed, 30 insertions(+), 35 deletions(-)

diff --git a/glamor/glamor_egl.c b/glamor/glamor_egl.c
index 984df6605..b9e37d804 100644
--- a/glamor/glamor_egl.c
+++ b/glamor/glamor_egl.c
@@ -164,22 +164,16 @@ glamor_egl_create_textured_screen(ScreenPtr screen, int handle, int stride)
 }
 
 static void
-glamor_egl_set_pixmap_image(PixmapPtr pixmap, EGLImageKHR image,
-                            Bool used_modifiers)
+glamor_egl_set_pixmap_bo(PixmapPtr pixmap, struct gbm_bo *bo,
+                         Bool used_modifiers)
 {
     struct glamor_pixmap_private *pixmap_priv =
         glamor_get_pixmap_private(pixmap);
-    EGLImageKHR old;
 
-    old = pixmap_priv->image;
-    if (old) {
-        ScreenPtr                               screen = pixmap->drawable.pScreen;
-        ScrnInfoPtr                             scrn = xf86ScreenToScrn(screen);
-        struct glamor_egl_screen_private        *glamor_egl = glamor_egl_get_screen_private(scrn);
+    if (pixmap_priv->bo)
+        gbm_bo_destroy(pixmap_priv->bo);
 
-        eglDestroyImageKHR(glamor_egl->display, old);
-    }
-    pixmap_priv->image = image;
+    pixmap_priv->bo = bo;
     pixmap_priv->used_modifiers = used_modifiers;
 }
 
@@ -246,7 +240,7 @@ glamor_egl_create_textured_pixmap_from_gbm_bo(PixmapPtr pixmap,
     glamor_create_texture_from_image(screen, image, &texture);
     glamor_set_pixmap_type(pixmap, GLAMOR_TEXTURE_DRM);
     glamor_set_pixmap_texture(pixmap, texture);
-    glamor_egl_set_pixmap_image(pixmap, image, used_modifiers);
+    glamor_egl_set_pixmap_bo(pixmap, bo, used_modifiers);
     ret = TRUE;
 
  done:
@@ -280,7 +274,7 @@ glamor_make_pixmap_exportable(PixmapPtr pixmap, Bool modifiers_ok)
     PixmapPtr exported;
     GCPtr scratch_gc;
 
-    if (pixmap_priv->image &&
+    if (pixmap_priv->bo &&
         (modifiers_ok || !pixmap_priv->used_modifiers))
         return TRUE;
 
@@ -352,7 +346,6 @@ glamor_make_pixmap_exportable(PixmapPtr pixmap, Bool modifiers_ok)
         gbm_bo_destroy(bo);
         return FALSE;
     }
-    gbm_bo_destroy(bo);
 
     scratch_gc = GetScratchGC(pixmap->drawable.depth, screen);
     ValidateGC(&pixmap->drawable, scratch_gc);
@@ -374,16 +367,13 @@ glamor_make_pixmap_exportable(PixmapPtr pixmap, Bool modifiers_ok)
 static struct gbm_bo *
 glamor_gbm_bo_from_pixmap_internal(ScreenPtr screen, PixmapPtr pixmap)
 {
-    struct glamor_egl_screen_private *glamor_egl =
-        glamor_egl_get_screen_private(xf86ScreenToScrn(screen));
     struct glamor_pixmap_private *pixmap_priv =
         glamor_get_pixmap_private(pixmap);
 
-    if (!pixmap_priv->image)
+    if (!pixmap_priv->bo)
         return NULL;
 
-    return gbm_bo_import(glamor_egl->gbm, GBM_BO_IMPORT_EGL_IMAGE,
-                         pixmap_priv->image, 0);
+    return pixmap_priv->bo;
 }
 
 struct gbm_bo *
@@ -430,7 +420,6 @@ glamor_egl_fds_from_pixmap(ScreenPtr screen, PixmapPtr pixmap, int *fds,
     *modifier = DRM_FORMAT_MOD_INVALID;
 #endif
 
-    gbm_bo_destroy(bo);
     return num_fds;
 #else
     return 0;
@@ -455,7 +444,6 @@ glamor_egl_fd_from_pixmap(ScreenPtr screen, PixmapPtr pixmap,
     fd = gbm_bo_get_fd(bo);
     *stride = gbm_bo_get_stride(bo);
     *size = *stride * gbm_bo_get_height(bo);
-    gbm_bo_destroy(bo);
 
     return fd;
 #else
@@ -486,8 +474,6 @@ glamor_egl_fd_name_from_pixmap(ScreenPtr screen,
     glamor_get_name_from_bo(glamor_egl->fd, bo, &fd);
     *stride = pixmap->devKind;
     *size = pixmap->devKind * gbm_bo_get_height(bo);
-
-    gbm_bo_destroy(bo);
  failure:
     return fd;
 }
@@ -526,7 +512,9 @@ glamor_back_pixmap_from_fd(PixmapPtr pixmap,
     screen->ModifyPixmapHeader(pixmap, width, height, 0, 0, stride, NULL);
 
     ret = glamor_egl_create_textured_pixmap_from_gbm_bo(pixmap, bo, FALSE);
-    gbm_bo_destroy(bo);
+    if (!ret)
+        gbm_bo_destroy(bo);
+
     return ret;
 }
 
@@ -583,7 +571,8 @@ glamor_pixmap_from_fds(ScreenPtr screen,
         if (bo) {
             screen->ModifyPixmapHeader(pixmap, width, height, 0, 0, strides[0], NULL);
             ret = glamor_egl_create_textured_pixmap_from_gbm_bo(pixmap, bo, TRUE);
-            gbm_bo_destroy(bo);
+            if (!ret)
+                gbm_bo_destroy(bo);
         }
     } else
 #endif
@@ -717,8 +706,8 @@ glamor_egl_destroy_pixmap(PixmapPtr pixmap)
         struct glamor_pixmap_private *pixmap_priv =
             glamor_get_pixmap_private(pixmap);
 
-        if (pixmap_priv->image)
-            eglDestroyImageKHR(glamor_egl->display, pixmap_priv->image);
+        if (pixmap_priv->bo)
+            gbm_bo_destroy(pixmap_priv->bo);
     }
 
     screen->DestroyPixmap = glamor_egl->saved_destroy_pixmap;
@@ -732,7 +721,7 @@ glamor_egl_destroy_pixmap(PixmapPtr pixmap)
 _X_EXPORT void
 glamor_egl_exchange_buffers(PixmapPtr front, PixmapPtr back)
 {
-    EGLImageKHR temp_img;
+    struct gbm_bo *temp_bo;
     Bool temp_mod;
     struct glamor_pixmap_private *front_priv =
         glamor_get_pixmap_private(front);
@@ -741,11 +730,11 @@ glamor_egl_exchange_buffers(PixmapPtr front, PixmapPtr back)
 
     glamor_pixmap_exchange_fbos(front, back);
 
-    temp_img = back_priv->image;
+    temp_bo = back_priv->bo;
     temp_mod = back_priv->used_modifiers;
-    back_priv->image = front_priv->image;
+    back_priv->bo = front_priv->bo;
     back_priv->used_modifiers = front_priv->used_modifiers;
-    front_priv->image = temp_img;
+    front_priv->bo = temp_bo;
     front_priv->used_modifiers = temp_mod;
 
     glamor_set_pixmap_type(front, GLAMOR_TEXTURE_DRM);
@@ -765,8 +754,8 @@ glamor_egl_close_screen(ScreenPtr screen)
     screen_pixmap = screen->GetScreenPixmap(screen);
     pixmap_priv = glamor_get_pixmap_private(screen_pixmap);
 
-    eglDestroyImageKHR(glamor_egl->display, pixmap_priv->image);
-    pixmap_priv->image = NULL;
+    gbm_bo_destroy(pixmap_priv->bo);
+    pixmap_priv->bo = NULL;
 
     screen->CloseScreen = glamor_egl->saved_close_screen;
 
diff --git a/glamor/glamor_priv.h b/glamor/glamor_priv.h
index 10c74c1b5..135546b9d 100644
--- a/glamor/glamor_priv.h
+++ b/glamor/glamor_priv.h
@@ -56,6 +56,10 @@
 
 #include <list.h>
 
+#ifdef GLAMOR_HAS_GBM
+#include <gbm.h>
+#endif
+
 struct glamor_pixmap_private;
 
 typedef struct glamor_composite_shader {
@@ -351,7 +355,7 @@ typedef struct glamor_pixmap_private {
     RegionRec prepare_region;
     Bool prepared;
 #ifdef GLAMOR_HAS_GBM
-    EGLImageKHR image;
+    struct gbm_bo *bo;
     Bool used_modifiers;
 #endif
     /** block width of this large pixmap. */
diff --git a/hw/xfree86/drivers/modesetting/pageflip.c b/hw/xfree86/drivers/modesetting/pageflip.c
index 9667f132d..062578f2f 100644
--- a/hw/xfree86/drivers/modesetting/pageflip.c
+++ b/hw/xfree86/drivers/modesetting/pageflip.c
@@ -256,6 +256,7 @@ ms_do_pageflip(ScreenPtr screen,
 
     flipdata = calloc(1, sizeof(struct ms_flipdata));
     if (!flipdata) {
+        new_front_bo.gbm = NULL;
         drmmode_bo_destroy(&ms->drmmode, &new_front_bo);
         xf86DrvMsg(scrn->scrnIndex, X_ERROR,
                    "Failed to allocate flipdata.\n");
@@ -311,6 +312,7 @@ ms_do_pageflip(ScreenPtr screen,
         }
     }
 
+    new_front_bo.gbm = NULL;
     drmmode_bo_destroy(&ms->drmmode, &new_front_bo);
 
     /*
@@ -338,6 +340,7 @@ error_undo:
 error_out:
     xf86DrvMsg(scrn->scrnIndex, X_WARNING, "Page flip failed: %s\n",
                strerror(errno));
+    new_front_bo.gbm = NULL;
     drmmode_bo_destroy(&ms->drmmode, &new_front_bo);
     /* if only the local reference - free the structure,
      * else drop the local reference and return */
diff --git a/hw/xfree86/drivers/modesetting/present.c b/hw/xfree86/drivers/modesetting/present.c
index dda7cc064..6f66c9fd3 100644
--- a/hw/xfree86/drivers/modesetting/present.c
+++ b/hw/xfree86/drivers/modesetting/present.c
@@ -263,7 +263,6 @@ ms_present_check_flip(RRCrtcPtr crtc,
 
         format = gbm_bo_get_format(gbm);
         modifier = gbm_bo_get_modifier(gbm);
-        gbm_bo_destroy(gbm);
 
         if (!drmmode_is_format_supported(scrn, format, modifier)) {
             if (reason)
-- 
2.11.0

