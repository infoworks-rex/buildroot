From 473918f6bb4ed3f33320435ccb00b032b96394da Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Tue, 9 Jul 2019 19:51:32 +0800
Subject: [PATCH 35/41] glamor: prepare: Prefer using gbm_bo_map/gbm_bo_unmap

Prefer using gbm_bo_map/gbm_bo_unmap instead of glamor_transfer, to
avoid buffer copying.

Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 configure.ac            |  3 +++
 glamor/glamor_egl.c     | 19 +++++++++++++------
 glamor/glamor_prepare.c | 47 +++++++++++++++++++++++++++++++++++++++++++----
 glamor/glamor_priv.h    |  3 +++
 include/dix-config.h.in |  3 +++
 5 files changed, 65 insertions(+), 10 deletions(-)

diff --git a/configure.ac b/configure.ac
index 948fa3e08..7cf384064 100644
--- a/configure.ac
+++ b/configure.ac
@@ -2108,6 +2108,9 @@ if test "x$GLAMOR" = xyes; then
 		PKG_CHECK_EXISTS(gbm >= 17.1.0,
 				 [AC_DEFINE(GBM_BO_WITH_MODIFIERS, 1, [Have gbm_bo_create_with_modifiers])],
 				 [])
+		AC_CHECK_HEADER([gbm.h],
+			[AC_CHECK_LIB(gbm, gbm_bo_map,
+				[AC_DEFINE(GLAMOR_HAS_GBM_MAP,1,[Have gbm_bo_map])])])
 	else
 		if test "x$XORG" = xyes; then
 			AC_MSG_ERROR([Glamor for Xorg requires $LIBGBM])
diff --git a/glamor/glamor_egl.c b/glamor/glamor_egl.c
index b9e37d804..b3e69ab23 100644
--- a/glamor/glamor_egl.c
+++ b/glamor/glamor_egl.c
@@ -170,9 +170,16 @@ glamor_egl_set_pixmap_bo(PixmapPtr pixmap, struct gbm_bo *bo,
     struct glamor_pixmap_private *pixmap_priv =
         glamor_get_pixmap_private(pixmap);
 
-    if (pixmap_priv->bo)
+    if (pixmap_priv->bo) {
+#ifdef GLAMOR_HAS_GBM_MAP
+        if (pixmap_priv->bo_mapped) {
+            gbm_bo_unmap(pixmap_priv->bo, pixmap_priv->map_data);
+            pixmap_priv->bo_mapped = FALSE;
+            pixmap->devPrivate.ptr = NULL;
+        }
+#endif
         gbm_bo_destroy(pixmap_priv->bo);
-
+    }
     pixmap_priv->bo = bo;
     pixmap_priv->used_modifiers = used_modifiers;
 }
@@ -349,9 +356,11 @@ glamor_make_pixmap_exportable(PixmapPtr pixmap, Bool modifiers_ok)
 
     scratch_gc = GetScratchGC(pixmap->drawable.depth, screen);
     ValidateGC(&pixmap->drawable, scratch_gc);
+    pixmap_priv->exporting = TRUE;
     scratch_gc->ops->CopyArea(&pixmap->drawable, &exported->drawable,
                               scratch_gc,
                               0, 0, width, height, 0, 0);
+    pixmap_priv->exporting = FALSE;
     FreeScratchGC(scratch_gc);
 
     /* Now, swap the tex/gbm/EGLImage/etc. of the exported pixmap into
@@ -706,8 +715,7 @@ glamor_egl_destroy_pixmap(PixmapPtr pixmap)
         struct glamor_pixmap_private *pixmap_priv =
             glamor_get_pixmap_private(pixmap);
 
-        if (pixmap_priv->bo)
-            gbm_bo_destroy(pixmap_priv->bo);
+        glamor_egl_set_pixmap_bo(pixmap, NULL, pixmap_priv->used_modifiers);
     }
 
     screen->DestroyPixmap = glamor_egl->saved_destroy_pixmap;
@@ -754,8 +762,7 @@ glamor_egl_close_screen(ScreenPtr screen)
     screen_pixmap = screen->GetScreenPixmap(screen);
     pixmap_priv = glamor_get_pixmap_private(screen_pixmap);
 
-    gbm_bo_destroy(pixmap_priv->bo);
-    pixmap_priv->bo = NULL;
+    glamor_egl_set_pixmap_bo(screen_pixmap, NULL, pixmap_priv->used_modifiers);
 
     screen->CloseScreen = glamor_egl->saved_close_screen;
 
diff --git a/glamor/glamor_prepare.c b/glamor/glamor_prepare.c
index 835c4ebea..8310551cb 100644
--- a/glamor/glamor_prepare.c
+++ b/glamor/glamor_prepare.c
@@ -57,7 +57,7 @@ glamor_prep_pixmap_box(PixmapPtr pixmap, glamor_access_t access, BoxPtr box)
          * by a lower level driver
          */
         if (!priv->prepared)
-            return TRUE;
+            goto done;
 
         /* In X, multiple Drawables can be stored in the same Pixmap (such as
          * each individual window in a non-composited screen pixmap, or the
@@ -69,7 +69,7 @@ glamor_prep_pixmap_box(PixmapPtr pixmap, glamor_access_t access, BoxPtr box)
          */
         RegionSubtract(&region, &region, &priv->prepare_region);
         if (!RegionNotEmpty(&region))
-            return TRUE;
+            goto done;
 
         if (access == GLAMOR_ACCESS_RW)
             FatalError("attempt to remap buffer as writable");
@@ -80,8 +80,32 @@ glamor_prep_pixmap_box(PixmapPtr pixmap, glamor_access_t access, BoxPtr box)
             pixmap->devPrivate.ptr = NULL;
         }
     } else {
+#ifdef GLAMOR_HAS_GBM_MAP
+        struct gbm_bo *gbm = NULL;
+        uint32_t stride;
+
         RegionInit(&priv->prepare_region, box, 1);
 
+        if (!priv->exporting)
+            gbm = glamor_gbm_bo_from_pixmap(screen, pixmap);
+
+        if (gbm) {
+            pixmap->devPrivate.ptr =
+                gbm_bo_map(gbm, 0, 0, pixmap->drawable.width,
+                           pixmap->drawable.height,
+                           (access == GLAMOR_ACCESS_RW) ?
+                           GBM_BO_TRANSFER_READ_WRITE : GBM_BO_TRANSFER_READ,
+                           &stride, &priv->map_data);
+
+            if (pixmap->devPrivate.ptr) {
+                pixmap->devKind = stride;
+                priv->bo_mapped = TRUE;
+                priv->map_access = access;
+                goto done;
+            }
+        }
+#endif
+
         if (glamor_priv->has_rw_pbo) {
             if (priv->pbo == 0)
                 glGenBuffers(1, &priv->pbo);
@@ -122,8 +146,6 @@ glamor_prep_pixmap_box(PixmapPtr pixmap, glamor_access_t access, BoxPtr box)
     glamor_download_boxes(pixmap, RegionRects(&region), RegionNumRects(&region),
                           0, 0, 0, 0, pixmap->devPrivate.ptr, pixmap->devKind);
 
-    RegionUninit(&region);
-
     if (priv->pbo) {
         if (priv->map_access == GLAMOR_ACCESS_RW)
             gl_access = GL_READ_WRITE;
@@ -134,6 +156,15 @@ glamor_prep_pixmap_box(PixmapPtr pixmap, glamor_access_t access, BoxPtr box)
         glBindBuffer(GL_PIXEL_PACK_BUFFER, 0);
     }
 
+done:
+    RegionUninit(&region);
+
+#ifdef GLAMOR_HAS_GBM
+    if (priv->bo_mapped)
+        /* Finish all commands before accessing the buffer */
+        glamor_finish(screen);
+#endif
+
     priv->prepared = TRUE;
     return TRUE;
 }
@@ -160,7 +191,11 @@ glamor_fini_pixmap(PixmapPtr pixmap)
         pixmap->devPrivate.ptr = NULL;
     }
 
+#ifdef GLAMOR_HAS_GBM
+    if (!priv->bo_mapped && priv->map_access == GLAMOR_ACCESS_RW) {
+#else
     if (priv->map_access == GLAMOR_ACCESS_RW) {
+#endif
         glamor_upload_boxes(pixmap,
                             RegionRects(&priv->prepare_region),
                             RegionNumRects(&priv->prepare_region),
@@ -173,6 +208,10 @@ glamor_fini_pixmap(PixmapPtr pixmap)
         glBindBuffer(GL_PIXEL_UNPACK_BUFFER, 0);
         glDeleteBuffers(1, &priv->pbo);
         priv->pbo = 0;
+#ifdef GLAMOR_HAS_GBM
+    } else if (priv->bo_mapped) {
+        /* Delay unmap to finalize */
+#endif
     } else {
         free(pixmap->devPrivate.ptr);
         pixmap->devPrivate.ptr = NULL;
diff --git a/glamor/glamor_priv.h b/glamor/glamor_priv.h
index 135546b9d..2960a2e6d 100644
--- a/glamor/glamor_priv.h
+++ b/glamor/glamor_priv.h
@@ -357,6 +357,9 @@ typedef struct glamor_pixmap_private {
 #ifdef GLAMOR_HAS_GBM
     struct gbm_bo *bo;
     Bool used_modifiers;
+    Bool bo_mapped;
+    void *map_data;
+    Bool exporting;
 #endif
     /** block width of this large pixmap. */
     int block_w;
diff --git a/include/dix-config.h.in b/include/dix-config.h.in
index 61f50e4b9..3afc00c62 100644
--- a/include/dix-config.h.in
+++ b/include/dix-config.h.in
@@ -479,6 +479,9 @@
 /* Build glamor/gbm has linear support */
 #undef GLAMOR_HAS_GBM_LINEAR
 
+/* Build glamor/gbm has bo_map support */
+#undef GLAMOR_HAS_GBM_MAP
+
 /* Build glamor/gbm has gl fence support */
 #undef GLAMOR_HAS_GL_FENCE
 
-- 
2.11.0

