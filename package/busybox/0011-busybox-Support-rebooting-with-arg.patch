From 9c517de009d2a2a5899a25e5342ab8af9aa42cbe Mon Sep 17 00:00:00 2001
From: zain wang <wzz@rock-chips.com>
Date: Wed, 27 Jun 2018 10:33:52 +0800
Subject: [PATCH] busybox: Support rebooting with arg

Support rebooting with arg when using busybox init, for example
"reboot loader".

Signed-off-by: zain wang <wzz@rock-chips.com>
Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 init/halt.c | 56 ++++++++++++++++++++++++++++++++++++++++++++++++++------
 init/init.c | 27 ++++++++++++++++++++++-----
 2 files changed, 72 insertions(+), 11 deletions(-)

diff --git a/init/halt.c b/init/halt.c
index 6b5c975..6c754da 100644
--- a/init/halt.c
+++ b/init/halt.c
@@ -68,6 +68,8 @@
 
 #include "libbb.h"
 #include "reboot.h"
+#include <linux/reboot.h>
+#include <sys/syscall.h>
 
 #if ENABLE_FEATURE_WTMP
 #include <sys/utsname.h>
@@ -94,6 +96,43 @@ static void write_wtmp(void)
 #define write_wtmp() ((void)0)
 #endif
 
+static volatile int caught_signal = FALSE;
+static void signal_handler(int sig)
+{
+	bb_error_msg("got sig(%d)", sig);
+	caught_signal = TRUE;
+}
+
+static int reboot_with_arg(const char *arg)
+{
+	struct sigaction sa;
+	int i = 100; // 5s timeouts;
+
+	memset(&sa, 0, sizeof(sa));
+	sigemptyset(&sa.sa_mask);
+	sa.sa_flags = 0;
+	sa.sa_handler = signal_handler;
+	sigaction_set(SIGTERM, &sa);
+
+	bb_error_msg("Waiting for sig term");
+
+	/* The init will send SIGTERM to us after SHUTDOWN actions */
+	while (!caught_signal && i--)
+		usleep(50000);
+
+	if (!i)
+		bb_error_msg("Timed out waiting for SHUTDOWN actions..."
+			     "(too much work?)");
+
+	/* Wait 200ms for other processes to exit */
+	usleep(200000);
+	sync();
+
+	bb_error_msg("rebooting with arg(%s)", arg);
+	return syscall(__NR_reboot, LINUX_REBOOT_MAGIC1,
+			LINUX_REBOOT_MAGIC2,
+			LINUX_REBOOT_CMD_RESTART2, arg);
+}
 
 int halt_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
 int halt_main(int argc UNUSED_PARAM, char **argv)
@@ -103,7 +142,7 @@ int halt_main(int argc UNUSED_PARAM, char **argv)
 		RB_POWER_OFF,
 		RB_AUTOBOOT
 	};
-	// add SIGPWR for reboot loader
+	// add SIGPWR for reboot with arg
 	static const smallint signals[] = { SIGUSR1, SIGUSR2, SIGTERM, SIGPWR };
 
 	int delay = 0;
@@ -140,12 +179,12 @@ int halt_main(int argc UNUSED_PARAM, char **argv)
 			/* talk to linuxrc */
 			/* bbox init/linuxrc assumed */
 			pid_t *pidlist = find_pid_by_name("linuxrc");
-			//set reboot parameter
-			if (signals[which] == SIGTERM) {
-				if (argc > 1 && strstr(argv[1], "loader") != NULL) {
-					which++;
-				}
+
+			if (signals[which] == SIGTERM && argc > 1 && argv[1][0] != '-') {
+				which++;
+				bb_error_msg("request reboot with arg(%s)", argv[1]);
 			}
+
 			if (pidlist[0] > 0)
 				rc = kill(pidlist[0], signals[which]);
 			if (ENABLE_FEATURE_CLEAN_UP)
@@ -170,6 +209,11 @@ int halt_main(int argc UNUSED_PARAM, char **argv)
 						CONFIG_TELINIT_PATH);
 			}
 		}
+
+		/* Pass reboot arg to kernel */
+		if (signals[which] == SIGPWR && argc > 1 && argv[1][0] != '-')
+			rc = reboot_with_arg(argv[1]);
+
 	} else {
 		rc = reboot(magic[which]);
 	}
diff --git a/init/init.c b/init/init.c
index 169d8c2..8455f7f 100644
--- a/init/init.c
+++ b/init/init.c
@@ -128,7 +128,6 @@
 
 #include "libbb.h"
 #include <syslog.h>
-#include <paths.h>
 #include <sys/resource.h>
 #ifdef __linux__
 # include <linux/vt.h>
@@ -802,7 +801,6 @@ static void run_shutdown_and_kill_processes(void)
  */
 
 /* The SIGPWR/SIGUSR[12]/SIGTERM handler */
-#define RB_AUTOBOOT_CMD	0xa1b2c3d4
 static void halt_reboot_pwoff(int sig) NORETURN;
 static void halt_reboot_pwoff(int sig)
 {
@@ -817,6 +815,28 @@ static void halt_reboot_pwoff(int sig)
 	 */
 	reset_sighandlers_and_unblock_sigs();
 
+	/* Rebooting with arg */
+	if (sig == SIGPWR) {
+		run_actions(SHUTDOWN);
+
+		kill(-1, SIGTERM);
+		message(L_CONSOLE | L_LOG, "Sent SIG%s to all processes", "TERM");
+		sync();
+
+		/* Let halt.c finish rebooting */
+		sleep(5);
+
+		/* Should not reach here */
+		message(L_CONSOLE | L_LOG, "Fallback to normal reboot");
+
+		kill(-1, SIGKILL);
+		message(L_CONSOLE, "Sent SIG%s to all processes", "KILL");
+		sync();
+
+		pause_and_low_level_reboot(RB_AUTOBOOT);
+		/* not reached */
+	}
+
 	run_shutdown_and_kill_processes();
 
 	m = "halt";
@@ -827,9 +847,6 @@ static void halt_reboot_pwoff(int sig)
 	} else if (sig == SIGUSR2) {
 		m = "poweroff";
 		rb = RB_POWER_OFF;
-	} else if (sig == SIGPWR) {
-		m = "reboot loader";
-		rb = RB_AUTOBOOT_CMD;
 	}
 	message(L_CONSOLE, "Requesting system %s", m);
 	pause_and_low_level_reboot(rb);
-- 
2.11.0

