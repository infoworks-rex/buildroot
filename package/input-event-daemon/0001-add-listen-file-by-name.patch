From 1e3cb7626b97905a990ad777a233333d904feff2 Mon Sep 17 00:00:00 2001
From: Zain Wang <wzz@rock-chips.com>
Date: Wed, 9 Jan 2019 14:17:28 +0800
Subject: [PATCH] add listen file by name

Signed-off-by: Zain Wang <wzz@rock-chips.com>
---
 0001-add-listen-file-by-name.patch | 102 +++++++++++++++++++++++++++++++++++++
 input-event-daemon.c               |  46 ++++++++++++++++-
 2 files changed, 146 insertions(+), 2 deletions(-)
 create mode 100644 0001-add-listen-file-by-name.patch

diff --git a/0001-add-listen-file-by-name.patch b/0001-add-listen-file-by-name.patch
new file mode 100644
index 0000000..0ff2df9
--- /dev/null
+++ b/0001-add-listen-file-by-name.patch
@@ -0,0 +1,102 @@
+From a2d94cd0b811c5d25f889d126dcbda56c8555162 Mon Sep 17 00:00:00 2001
+From: Zain Wang <wzz@rock-chips.com>
+Date: Wed, 9 Jan 2019 14:17:28 +0800
+Subject: [PATCH] add listen file by name
+
+Signed-off-by: Zain Wang <wzz@rock-chips.com>
+---
+ input-event-daemon.c | 49 +++++++++++++++++++++++++++++++++++++++++++++++--
+ 1 file changed, 47 insertions(+), 2 deletions(-)
+
+diff --git a/input-event-daemon.c b/input-event-daemon.c
+index 51e1e3c..eab05e4 100644
+--- a/input-event-daemon.c
++++ b/input-event-daemon.c
+@@ -17,6 +17,8 @@
+ #include "input-event-daemon.h"
+ #include "input-event-table.h"
+ 
++#define PATH_LEN_MAX 40
++#define NAME_LEN_MAX 32
+ 
+ static int key_event_compare(const key_event_t *a, const key_event_t *b) {
+     int i, r_cmp;
+@@ -384,6 +386,39 @@ static void input_parse_event(struct input_event *event, const char *src) {
+     }
+ }
+ 
++static int file_parse_by_name(char *name, char *event) {
++    int i = 0;
++    char event_name[32];
++    char event_path[40];
++    int event_fd;
++
++    while (1) {
++        memset(event_name, 0, sizeof(event_name));
++        memset(event_path, 0, sizeof(event_path));
++        sprintf(event_path, "/sys/class/input/event%d/device/name", i++);
++        event_fd = open(event_path, O_RDONLY);
++        if (event_fd < 0) {
++            fprintf(stderr, PROGRAM": open %s failed, stopping scan file: %s\n",
++                    event_path, strerror(errno));
++            break;
++        }
++        if (read(event_fd, &event_name, sizeof(event_name)) == -1) {
++            fprintf(stderr, PROGRAM": can't read (%s)\n", event_path, strerror(errno));
++            close(event_fd);
++            continue;
++        }
++
++        printf("[Zain] event_name=%s name=%s len=%d\n", event_name, name, strlen(name));
++        if (strncmp(event_name, name, strlen(name)) == 0) {
++            sprintf(event, "/dev/input/event%d", --i);
++            close(event_fd);
++            return 0;
++            break;
++        }
++	close(event_fd);
++    }
++    return -1;
++}
+ 
+ void config_parse_file() {
+     FILE *config_fd;
+@@ -393,6 +428,7 @@ void config_parse_file() {
+     const char *error = NULL;
+     int line_num = 0;
+     int listen_len = 0;
++    char event_path[40];
+ 
+     if((config_fd = fopen(conf.configfile, "r")) == NULL) {
+         fprintf(stderr, PROGRAM": fopen(%s): %s\n",
+@@ -438,9 +474,16 @@ void config_parse_file() {
+         } else if(strlen(key) == 0 || strlen(value) == 0) {
+             error = "Invlaid syntax!";
+         } else if(strcasecmp(section, "Global") == 0) {
+-            if(strcmp(key, "listen") == 0) {
++            if(strcmp(key, "listen") == 0 ||
++               strcmp(key, "listen_byname") == 0) {
+                 if(listen_len < MAX_LISTENER) {
+-                    conf.listen[listen_len++] = strdup(value);
++                    if (strcmp(key, "listen_byname") == 0) {
++                        memset(event_path, 0, sizeof(event_path));
++                        if (file_parse_by_name(strdup(value), event_path) != -1)
++                            conf.listen[listen_len++] = strdup(event_path);
++                    } else {
++                        conf.listen[listen_len++] = strdup(value);
++                    }
+                 } else {
+                     error = "Listener limit exceeded!";
+                 }
+@@ -480,6 +523,8 @@ void config_parse_file() {
+         free(section);
+     }
+ 
++    printf("[Zain] listen_file = %s\n", conf.listen[0]);
++    printf("[Zain] listen_file = %s\n", conf.listen[1]);
+     fclose(config_fd);
+ }
+ 
+-- 
+2.7.4
+
diff --git a/input-event-daemon.c b/input-event-daemon.c
index 51e1e3c..d176758 100644
--- a/input-event-daemon.c
+++ b/input-event-daemon.c
@@ -17,6 +17,8 @@
 #include "input-event-daemon.h"
 #include "input-event-table.h"
 
+#define PATH_LEN_MAX 40
+#define NAME_LEN_MAX 32
 
 static int key_event_compare(const key_event_t *a, const key_event_t *b) {
     int i, r_cmp;
@@ -384,6 +386,38 @@ static void input_parse_event(struct input_event *event, const char *src) {
     }
 }
 
+static int file_parse_by_name(char *name, char *event) {
+    int i = 0;
+    char event_name[32];
+    char event_path[40];
+    int event_fd;
+
+    while (1) {
+        memset(event_name, 0, sizeof(event_name));
+        memset(event_path, 0, sizeof(event_path));
+        sprintf(event_path, "/sys/class/input/event%d/device/name", i++);
+        event_fd = open(event_path, O_RDONLY);
+        if (event_fd < 0) {
+            fprintf(stderr, PROGRAM": open %s failed, stopping scan file: %s\n",
+                    event_path, strerror(errno));
+            break;
+        }
+        if (read(event_fd, &event_name, sizeof(event_name)) == -1) {
+            fprintf(stderr, PROGRAM": can't read (%s)\n", event_path, strerror(errno));
+            close(event_fd);
+            continue;
+        }
+
+        if (strncmp(event_name, name, strlen(name)) == 0) {
+            sprintf(event, "/dev/input/event%d", --i);
+            close(event_fd);
+            return 0;
+            break;
+        }
+	close(event_fd);
+    }
+    return -1;
+}
 
 void config_parse_file() {
     FILE *config_fd;
@@ -393,6 +427,7 @@ void config_parse_file() {
     const char *error = NULL;
     int line_num = 0;
     int listen_len = 0;
+    char event_path[40];
 
     if((config_fd = fopen(conf.configfile, "r")) == NULL) {
         fprintf(stderr, PROGRAM": fopen(%s): %s\n",
@@ -438,9 +473,16 @@ void config_parse_file() {
         } else if(strlen(key) == 0 || strlen(value) == 0) {
             error = "Invlaid syntax!";
         } else if(strcasecmp(section, "Global") == 0) {
-            if(strcmp(key, "listen") == 0) {
+            if(strcmp(key, "listen") == 0 ||
+               strcmp(key, "listen_byname") == 0) {
                 if(listen_len < MAX_LISTENER) {
-                    conf.listen[listen_len++] = strdup(value);
+                    if (strcmp(key, "listen_byname") == 0) {
+                        memset(event_path, 0, sizeof(event_path));
+                        if (file_parse_by_name(strdup(value), event_path) != -1)
+                            conf.listen[listen_len++] = strdup(event_path);
+                    } else {
+                        conf.listen[listen_len++] = strdup(value);
+                    }
                 } else {
                     error = "Listener limit exceeded!";
                 }
-- 
2.7.4

